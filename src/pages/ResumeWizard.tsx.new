import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { v4 as uuidv4 } from 'uuid';
import { ResumeData } from '@/lib/initialData';

// Types
type Experience = ResumeData['experience'][0];
type Education = ResumeData['education'][0];
type Skills = ResumeData['skills'];
type Project = ResumeData['projects'][0];
type Achievement = ResumeData['achievements'][0];
type Certification = ResumeData['certifications'][0];

type Section = {
  id: string;
  title: string;
  icon: React.ReactNode;
  value: string;
};

// Icons
import { 
  User, Briefcase, GraduationCap, Code, Award, FileText, Plus, X, 
  Pencil, Trash2, Mail, Phone, MapPin, Globe, Linkedin, Github, Share2,
  Calendar, CheckCircle, ChevronLeft, ChevronRight, Upload, Star, Folder, BadgeCheck
} from 'lucide-react';

// UI Components
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/components/ui/use-toast';
import { useResume } from '@/contexts/ResumeContext';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';

// Sidebar Component
const Sidebar = ({ sections, activeTab, onTabChange }: { 
  sections: Section[], 
  activeTab: string, 
  onTabChange: (value: string) => void 
}) => {
  return (
    <div className="w-64 border-r h-screen fixed left-0 top-0 p-4 bg-background overflow-y-auto">
      <div className="space-y-4">
        <div className="flex items-center space-x-2 p-2">
          <FileText className="h-6 w-6 text-primary" />
          <h2 className="text-xl font-bold">Resume Builder</h2>
        </div>
        
        <div className="space-y-1">
          {sections.map((section) => (
            <Button
              key={section.id}
              variant={activeTab === section.value ? 'secondary' : 'ghost'}
              className={`w-full justify-start ${activeTab === section.value ? 'bg-accent' : ''}`}
              onClick={() => onTabChange(section.value)}
            >
              <span className="mr-2">{section.icon}</span>
              {section.title}
            </Button>
          ))}
        </div>
        
        <Separator className="my-4" />
        
        <div className="p-2 space-y-2">
          <Button variant="outline" className="w-full" onClick={() => window.print()}>
            <FileText className="mr-2 h-4 w-4" />
            Export PDF
          </Button>
          <Button variant="outline" className="w-full">
            <Share2 className="mr-2 h-4 w-4" />
            Share
          </Button>
        </div>
        
        <div className="absolute bottom-4 left-0 right-0 p-4">
          <Button className="w-full" size="sm">
            Save & Exit
          </Button>
        </div>
      </div>
    </div>
  );
};

const ResumeWizard = () => {
  // Hooks - Single declarations only
  const navigate = useNavigate();
  const { toast } = useToast();
  const { resumeData, updateResumeData } = useResume();
  
  // UI State
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('personal');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  
  // Navigation sections
  const sections: Section[] = [
    { id: 'personal', title: 'Personal Info', icon: <User className="h-4 w-4" />, value: 'personal' },
    { id: 'summary', title: 'Summary', icon: <FileText className="h-4 w-4" />, value: 'summary' },
    { id: 'experience', title: 'Experience', icon: <Briefcase className="h-4 w-4" />, value: 'experience' },
    { id: 'education', title: 'Education', icon: <GraduationCap className="h-4 w-4" />, value: 'education' },
    { id: 'skills', title: 'Skills', icon: <Code className="h-4 w-4" />, value: 'skills' },
    { id: 'projects', title: 'Projects', icon: <Folder className="h-4 w-4" />, value: 'projects' },
    { id: 'achievements', title: 'Achievements', icon: <Award className="h-4 w-4" />, value: 'achievements' },
    { id: 'certifications', title: 'Certifications', icon: <BadgeCheck className="h-4 w-4" />, value: 'certifications' },
  ];
  
  // Form Data State
  const [formData, setFormData] = useState<ResumeData>(() => ({
    personal: {
      name: '',
      email: '',
      phone: '',
      location: '',
      website: '',
      linkedin: '',
      github: ''
    },
    summary: '',
    experience: [],
    education: [],
    skills: {
      languages: [],
      frameworks: [],
      tools: []
    },
    projects: [],
    achievements: [],
    certifications: [],
    customSections: []
  }));

  // Form State
  const [newSkill, setNewSkill] = useState({ category: 'languages' as const, value: '' });
  const [editingExperience, setEditingExperience] = useState<number | null>(null);
  const [editingEducation, setEditingEducation] = useState<number | null>(null);
  const [isExperienceDialogOpen, setIsExperienceDialogOpen] = useState(false);
  const [isEducationDialogOpen, setIsEducationDialogOpen] = useState(false);
  
  // Form states for experience and education
  const [experienceForm, setExperienceForm] = useState<Omit<Experience, 'id'>>({
    title: '',
    company: '',
    location: '',
    startDate: '',
    endDate: '',
    description: '',
    current: false
  });
  
  const [educationForm, setEducationForm] = useState<Omit<Education, 'id'>>({
    degree: '',
    school: '',
    fieldOfStudy: '',
    startDate: '',
    endDate: '',
    description: ''
  });

  // Update context when form data changes
  useEffect(() => {
    if (updateResumeData) {
      updateResumeData('personal', formData.personal);
      updateResumeData('summary', formData.summary);
      updateResumeData('experience', formData.experience);
      updateResumeData('education', formData.education);
      updateResumeData('skills', formData.skills);
      updateResumeData('projects', formData.projects);
      updateResumeData('achievements', formData.achievements);
      updateResumeData('certifications', formData.certifications);
    }
  }, [formData, updateResumeData]);
  
  // Load initial data from context
  useEffect(() => {
    if (resumeData) {
      setFormData(prev => ({
        ...prev,
        ...resumeData,
        // Ensure all required fields are present
        personal: {
          name: resumeData.personal?.name || '',
          email: resumeData.personal?.email || '',
          phone: resumeData.personal?.phone || '',
          location: resumeData.personal?.location || '',
          website: resumeData.personal?.website || '',
          linkedin: resumeData.personal?.linkedin || '',
          github: resumeData.personal?.github || ''
        },
        skills: {
          languages: [],
          frameworks: [],
          tools: [],
          ...resumeData.skills
        },
        experience: resumeData.experience || [],
        education: resumeData.education || [],
        summary: resumeData.summary || ''
      }));
    }
  }, [resumeData]);

  // Handle form field changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle personal info changes
  const handlePersonalChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      personal: {
        ...prev.personal,
        [name]: value
      }
    }));
  };

  // Handle experience form changes
  const handleExperienceChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLInputElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    const checked = type === 'checkbox' ? (e.target as HTMLInputElement).checked : undefined;
    
    setExperienceForm(prev => ({
      ...prev,
      [name]: checked !== undefined ? checked : value
    }));
  };

  // Handle education form changes
  const handleEducationChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEducationForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle adding a new skill
  const handleAddSkill = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newSkill.value.trim()) return;

    setFormData(prev => {
      const category = newSkill.category as keyof Skills;
      const updatedSkills = {
        ...prev.skills,
        [category]: [...(prev.skills[category] || []), newSkill.value.trim()]
      };

      return {
        ...prev,
        skills: updatedSkills
      };
    });

    setNewSkill(prev => ({ ...prev, value: '' }));
  };

  // Handle removing a skill
  const handleRemoveSkill = (category: keyof Skills, index: number) => {
    setFormData(prev => {
      const categorySkills = prev.skills[category] || [];
      const updatedSkills = {
        ...prev.skills,
        [category]: categorySkills.filter((_, i) => i !== index)
      };

      return {
        ...prev,
        skills: updatedSkills
      };
    });
  };

  // Handle experience form submission
  const handleExperienceSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const newExperience = {
      ...experienceForm,
      id: uuidv4()
    };

    if (editingExperience !== null) {
      // Update existing experience
      setFormData(prev => ({
        ...prev,
        experience: prev.experience.map((exp, i) => 
          i === editingExperience ? newExperience : exp
        )
      }));
    } else {
      // Add new experience
      setFormData(prev => ({
        ...prev,
        experience: [...prev.experience, newExperience]
      }));
    }

    // Reset form
    setExperienceForm({
      title: '',
      company: '',
      location: '',
      startDate: '',
      endDate: '',
      description: '',
      current: false
    });
    
    setIsExperienceDialogOpen(false);
    setEditingExperience(null);
  };

  // Handle education form submission
  const handleEducationSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const newEducation = {
      ...educationForm,
      id: uuidv4()
    };

    if (editingEducation !== null) {
      // Update existing education
      setFormData(prev => ({
        ...prev,
        education: prev.education.map((edu, i) => 
          i === editingEducation ? newEducation : edu
        )
      }));
    } else {
      // Add new education
      setFormData(prev => ({
        ...prev,
        education: [...prev.education, newEducation]
      }));
    }

    // Reset form
    setEducationForm({
      degree: '',
      school: '',
      fieldOfStudy: '',
      startDate: '',
      endDate: '',
      description: ''
    });
    
    setIsEducationDialogOpen(false);
    setEditingEducation(null);
  };

  // Handle editing an experience entry
  const handleEditExperience = (index: number) => {
    const experience = formData.experience[index];
    setExperienceForm({
      title: experience.title,
      company: experience.company,
      location: experience.location,
      startDate: experience.startDate,
      endDate: experience.endDate,
      description: experience.description,
      current: experience.current || false
    });
    setEditingExperience(index);
    setIsExperienceDialogOpen(true);
  };

  // Handle editing an education entry
  const handleEditEducation = (index: number) => {
    const education = formData.education[index];
    setEducationForm({
      degree: education.degree,
      school: education.school,
      fieldOfStudy: education.fieldOfStudy,
      startDate: education.startDate,
      endDate: education.endDate,
      description: education.description
    });
    setEditingEducation(index);
    setIsEducationDialogOpen(true);
  };

  // Handle removing an experience entry
  const handleRemoveExperience = (index: number) => {
    setFormData(prev => ({
      ...prev,
      experience: prev.experience.filter((_, i) => i !== index)
    }));
  };

  // Handle removing an education entry
  const handleRemoveEducation = (index: number) => {
    setFormData(prev => ({
      ...prev,
      education: prev.education.filter((_, i) => i !== index)
    }));
  };

  // Calculate completion percentage
  const calculateCompletion = () => {
    let completed = 0;
    const total = 7; // Total number of sections
    
    if (formData.personal.name && formData.personal.email) completed++;
    if (formData.summary) completed++;
    if (formData.experience.length > 0) completed++;
    if (formData.education.length > 0) completed++;
    if (Object.values(formData.skills).some(skill => skill.length > 0)) completed++;
    if (formData.projects.length > 0) completed++;
    if (formData.achievements.length > 0 || formData.certifications.length > 0) completed++;
    
    return Math.round((completed / total) * 100);
  };

  const completionPercentage = calculateCompletion();

  return (
    <div className="flex h-screen bg-background">
      {/* Mobile menu button */}
      <Button 
        variant="ghost" 
        size="icon" 
        className="md:hidden fixed top-4 left-4 z-50"
        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
      >
        {isMobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
      </Button>

      {/* Sidebar */}
      <div className={`${isMobileMenuOpen ? 'block' : 'hidden'} md:block`}>
        <Sidebar 
          sections={sections} 
          activeTab={activeTab} 
          onTabChange={setActiveTab} 
        />
      </div>

      {/* Main content */}
      <div className="flex-1 md:ml-64 p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          {/* Progress bar */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-2">
              <h2 className="text-lg font-semibold">Resume Progress</h2>
              <span className="text-sm text-muted-foreground">{completionPercentage}% Complete</span>
            </div>
            <Progress value={completionPercentage} className="h-2" />
          </div>

          {/* Form sections */}
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            {/* Personal Info Tab */}
            <TabsContent value="personal">
              <Card>
                <CardHeader>
                  <CardTitle>Personal Information</CardTitle>
                  <CardDescription>
                    Provide your personal details to get started with your resume.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name</Label>
                      <Input
                        id="name"
                        name="name"
                        value={formData.personal.name}
                        onChange={handlePersonalChange}
                        placeholder="John Doe"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.personal.email}
                        onChange={handlePersonalChange}
                        placeholder="john@example.com"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone</Label>
                      <Input
                        id="phone"
                        name="phone"
                        value={formData.personal.phone}
                        onChange={handlePersonalChange}
                        placeholder="(123) 456-7890"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="location">Location</Label>
                      <Input
                        id="location"
                        name="location"
                        value={formData.personal.location}
                        onChange={handlePersonalChange}
                        placeholder="City, Country"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="website">Website</Label>
                      <Input
                        id="website"
                        name="website"
                        value={formData.personal.website}
                        onChange={handlePersonalChange}
                        placeholder="https://yourwebsite.com"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="linkedin">LinkedIn</Label>
                      <Input
                        id="linkedin"
                        name="linkedin"
                        value={formData.personal.linkedin}
                        onChange={handlePersonalChange}
                        placeholder="https://linkedin.com/in/username"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="github">GitHub</Label>
                      <Input
                        id="github"
                        name="github"
                        value={formData.personal.github}
                        onChange={handlePersonalChange}
                        placeholder="https://github.com/username"
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Summary Tab */}
            <TabsContent value="summary">
              <Card>
                <CardHeader>
                  <CardTitle>Professional Summary</CardTitle>
                  <CardDescription>
                    Write a brief summary about yourself and your professional background.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Textarea
                    className="min-h-[200px]"
                    value={formData.summary}
                    onChange={(e) => setFormData({...formData, summary: e.target.value})}
                    placeholder="Experienced professional with a passion for..."
                  />
                </CardContent>
              </Card>
            </TabsContent>

            {/* Experience Tab */}
            <TabsContent value="experience">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle>Work Experience</CardTitle>
                    <CardDescription>
                      List your work experience in reverse chronological order.
                    </CardDescription>
                  </div>
                  <Dialog open={isExperienceDialogOpen} onOpenChange={setIsExperienceDialogOpen}>
                    <DialogTrigger asChild>
                      <Button size="sm" onClick={() => setEditingExperience(null)}>
                        <Plus className="mr-2 h-4 w-4" /> Add Experience
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl">
                      <DialogHeader>
                        <DialogTitle>
                          {editingExperience !== null ? 'Edit Experience' : 'Add New Experience'}
                        </DialogTitle>
                      </DialogHeader>
                      <form onSubmit={handleExperienceSubmit}>
                        <div className="grid gap-4 py-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-2">
                              <Label htmlFor="title">Job Title</Label>
                              <Input
                                id="title"
                                name="title"
                                value={experienceForm.title}
                                onChange={handleExperienceChange}
                                placeholder="e.g. Software Engineer"
                                required
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="company">Company</Label>
                              <Input
                                id="company"
                                name="company"
                                value={experienceForm.company}
                                onChange={handleExperienceChange}
                                placeholder="Company Name"
                                required
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="location">Location</Label>
                              <Input
                                id="location"
                                name="location"
                                value={experienceForm.location}
                                onChange={handleExperienceChange}
                                placeholder="City, Country"
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="startDate">Start Date</Label>
                              <Input
                                id="startDate"
                                name="startDate"
                                type="date"
                                value={experienceForm.startDate}
                                onChange={handleExperienceChange}
                                required
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="endDate">End Date</Label>
                              <Input
                                id="endDate"
                                name="endDate"
                                type="date"
                                value={experienceForm.endDate}
                                onChange={handleExperienceChange}
                                disabled={experienceForm.current}
                              />
                            </div>
                            <div className="space-y-2 flex items-end">
                              <div className="flex items-center space-x-2">
                                <Switch
                                  id="current"
                                  name="current"
                                  checked={experienceForm.current}
                                  onCheckedChange={(checked) => 
                                    setExperienceForm(prev => ({ ...prev, current: checked }))
                                  }
                                />
                                <Label htmlFor="current">I currently work here</Label>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="description">Description</Label>
                            <Textarea
                              id="description"
                              name="description"
                              value={experienceForm.description}
                              onChange={handleExperienceChange}
                              placeholder="Describe your role and responsibilities"
                              className="min-h-[100px]"
                            />
                          </div>
                        </div>
                        <DialogFooter>
                          <Button type="button" variant="outline" onClick={() => setIsExperienceDialogOpen(false)}>
                            Cancel
                          </Button>
                          <Button type="submit">
                            {editingExperience !== null ? 'Update' : 'Add'} Experience
                          </Button>
                        </DialogFooter>
                      </form>
                    </DialogContent>
                  </Dialog>
                </CardHeader>
                <CardContent>
                  {formData.experience.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <Briefcase className="mx-auto h-12 w-12 mb-2 opacity-20" />
                      <p>No work experience added yet.</p>
                      <p className="text-sm">Click the button above to add your first job.</p>
                    </div>
                  ) : (
                    <div className="space-y-6">
                      {formData.experience.map((exp, index) => (
                        <div key={exp.id} className="border rounded-lg p-4 relative group">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-semibold">{exp.title}</h3>
                              <p className="text-sm text-muted-foreground">
                                {exp.company} • {exp.location}
                              </p>
                              <p className="text-sm text-muted-foreground">
                                {exp.startDate} - {exp.current ? 'Present' : exp.endDate}
                              </p>
                            </div>
                            <div className="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleEditExperience(index)}
                              >
                                <Pencil className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleRemoveExperience(index)}
                              >
                                <Trash2 className="h-4 w-4 text-destructive" />
                              </Button>
                            </div>
                          </div>
                          {exp.description && (
                            <p className="mt-2 text-sm">{exp.description}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            {/* Education Tab */}
            <TabsContent value="education">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle>Education</CardTitle>
                    <CardDescription>
                      List your educational background in reverse chronological order.
                    </CardDescription>
                  </div>
                  <Dialog open={isEducationDialogOpen} onOpenChange={setIsEducationDialogOpen}>
                    <DialogTrigger asChild>
                      <Button size="sm" onClick={() => setEditingEducation(null)}>
                        <Plus className="mr-2 h-4 w-4" /> Add Education
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl">
                      <DialogHeader>
                        <DialogTitle>
                          {editingEducation !== null ? 'Edit Education' : 'Add New Education'}
                        </DialogTitle>
                      </DialogHeader>
                      <form onSubmit={handleEducationSubmit}>
                        <div className="grid gap-4 py-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-2">
                              <Label htmlFor="degree">Degree</Label>
                              <Input
                                id="degree"
                                name="degree"
                                value={educationForm.degree}
                                onChange={handleEducationChange}
                                placeholder="e.g. Bachelor of Science"
                                required
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="school">School</Label>
                              <Input
                                id="school"
                                name="school"
                                value={educationForm.school}
                                onChange={handleEducationChange}
                                placeholder="University Name"
                                required
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="fieldOfStudy">Field of Study</Label>
                              <Input
                                id="fieldOfStudy"
                                name="fieldOfStudy"
                                value={educationForm.fieldOfStudy}
                                onChange={handleEducationChange}
                                placeholder="e.g. Computer Science"
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="startDate">Start Date</Label>
                              <Input
                                id="startDate"
                                name="startDate"
                                type="date"
                                value={educationForm.startDate}
                                onChange={handleEducationChange}
                                required
                              />
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="endDate">End Date (or expected)</Label>
                              <Input
                                id="endDate"
                                name="endDate"
                                type="date"
                                value={educationForm.endDate}
                                onChange={handleEducationChange}
                              />
                            </div>
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="description">Description</Label>
                            <Textarea
                              id="description"
                              name="description"
                              value={educationForm.description}
                              onChange={handleEducationChange}
                              placeholder="Notable achievements, coursework, or activities"
                              className="min-h-[100px]"
                            />
                          </div>
                        </div>
                        <DialogFooter>
                          <Button type="button" variant="outline" onClick={() => setIsEducationDialogOpen(false)}>
                            Cancel
                          </Button>
                          <Button type="submit">
                            {editingEducation !== null ? 'Update' : 'Add'} Education
                          </Button>
                        </DialogFooter>
                      </form>
                    </DialogContent>
                  </Dialog>
                </CardHeader>
                <CardContent>
                  {formData.education.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <GraduationCap className="mx-auto h-12 w-12 mb-2 opacity-20" />
                      <p>No education information added yet.</p>
                      <p className="text-sm">Click the button above to add your first education entry.</p>
                    </div>
                  ) : (
                    <div className="space-y-6">
                      {formData.education.map((edu, index) => (
                        <div key={edu.id} className="border rounded-lg p-4 relative group">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-semibold">{edu.degree}</h3>
                              <p className="text-sm text-muted-foreground">
                                {edu.school}
                                {edu.fieldOfStudy && ` • ${edu.fieldOfStudy}`}
                              </p>
                              <p className="text-sm text-muted-foreground">
                                {edu.startDate} - {edu.endDate || 'Present'}
                              </p>
                            </div>
                            <div className="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleEditEducation(index)}
                              >
                                <Pencil className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => handleRemoveEducation(index)}
                              >
                                <Trash2 className="h-4 w-4 text-destructive" />
                              </Button>
                            </div>
                          </div>
                          {edu.description && (
                            <p className="mt-2 text-sm">{edu.description}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            {/* Skills Tab */}
            <TabsContent value="skills">
              <Card>
                <CardHeader>
                  <CardTitle>Skills</CardTitle>
                  <CardDescription>
                    Add your technical and professional skills.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleAddSkill} className="mb-6">
                    <div className="flex flex-col sm:flex-row gap-2">
                      <div className="flex-1">
                        <Input
                          placeholder="Add a skill"
                          value={newSkill.value}
                          onChange={(e) => setNewSkill({...newSkill, value: e.target.value})}
                        />
                      </div>
                      <div className="w-full sm:w-auto">
                        <select
                          className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                          value={newSkill.category}
                          onChange={(e) => setNewSkill({...newSkill, category: e.target.value as any})}
                        >
                          <option value="languages">Languages</option>
                          <option value="frameworks">Frameworks</option>
                          <option value="tools">Tools</option>
                        </select>
                      </div>
                      <Button type="submit">Add Skill</Button>
                    </div>
                  </form>

                  <div className="space-y-6">
                    {(['languages', 'frameworks', 'tools'] as const).map((category) => (
                      formData.skills[category]?.length > 0 && (
                        <div key={category} className="space-y-2">
                          <h3 className="font-medium capitalize">{category}</h3>
                          <div className="flex flex-wrap gap-2">
                            {formData.skills[category]?.map((skill, index) => (
                              <Badge key={index} variant="secondary" className="flex items-center gap-1">
                                {skill}
                                <button
                                  type="button"
                                  onClick={() => handleRemoveSkill(category, index)}
                                  className="opacity-70 hover:opacity-100"
                                >
                                  <X className="h-3 w-3" />
                                </button>
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Projects Tab */}
            <TabsContent value="projects">
              <Card>
                <CardHeader>
                  <CardTitle>Projects</CardTitle>
                  <CardDescription>
                    Showcase your projects and open-source contributions.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-8 text-muted-foreground">
                    <Folder className="mx-auto h-12 w-12 mb-2 opacity-20" />
                    <p>No projects added yet.</p>
                    <p className="text-sm">This section is coming soon.</p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Achievements Tab */}
            <TabsContent value="achievements">
              <Card>
                <CardHeader>
                  <CardTitle>Achievements</CardTitle>
                  <CardDescription>
                    Highlight your professional achievements and awards.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-8 text-muted-foreground">
                    <Award className="mx-auto h-12 w-12 mb-2 opacity-20" />
                    <p>No achievements added yet.</p>
                    <p className="text-sm">This section is coming soon.</p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Certifications Tab */}
            <TabsContent value="certifications">
              <Card>
                <CardHeader>
                  <CardTitle>Certifications</CardTitle>
                  <CardDescription>
                    List your professional certifications and courses.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-8 text-muted-foreground">
                    <BadgeCheck className="mx-auto h-12 w-12 mb-2 opacity-20" />
                    <p>No certifications added yet.</p>
                    <p className="text-sm">This section is coming soon.</p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default ResumeWizard;
